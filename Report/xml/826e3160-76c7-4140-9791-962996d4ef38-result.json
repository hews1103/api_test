{"name": "test_personnel[人员名称搜索]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Test_case.test_demo.Test_info object at 0x000002630484FDA0>, ff = 'get'\naddress = '/dnc/file/blurry/user', data = '', key = '', sql_data = ''\nexcel_file = '', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        rp_resp = ''\n        #去除接口地址中的空格\n        address = address.replace(\" \", '')\n        #去除上传文件路径中的空格\n        excel_file = excel_file.replace(\" \", '')\n        #sql为空或不填\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n            #执行断言\n            assertions.assert_code(rp_resp.status_code, 200)\n            rp_resp_json = rp_resp.json()\n>           assertions.assert_in_text(rp_resp_json['message'], msg)\n\nTest_case\\test_demo.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000002630482AC50>\nbody = 'deviceId不能为空', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:58: AssertionError"}, "attachments": [{"name": "请求", "source": "b44846a1-be77-4879-9572-87f66c5e864b-attachment.txt", "type": "text/plain"}, {"name": "响应", "source": "46356118-d15e-40d5-8b50-340a6bc2a94b-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "b3763bb3-67e4-4c9b-8e7e-d488a73531ec-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "ff", "value": "'get'"}, {"name": "address", "value": "'/dnc/file/blurry/user'"}, {"name": "data", "value": "''"}, {"name": "key", "value": "''"}, {"name": "sql_data", "value": "''"}, {"name": "excel_file", "value": "''"}, {"name": "msg", "value": "'Success'"}], "start": 1603682237054, "stop": 1603682237424, "uuid": "b7977414-de82-4e3f-a9bf-d2c743ce8da0", "historyId": "552355b78315153acbf20651938e0946", "testCaseId": "71b135ca58a2f94a92c67fae54b7386a", "fullName": "test_demo.Test_info#test_personnel", "labels": [{"name": "story", "value": "回归用例"}, {"name": "feature", "value": "回归测试"}, {"name": "tag", "value": "ddd"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "Test_info"}, {"name": "host", "value": "DESKTOP-FIOLAUQ"}, {"name": "thread", "value": "18788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_demo"}], "links": [{"type": "issue", "url": "https://txqa.ziyun-cloud.com", "name": "https://txqa.ziyun-cloud.com"}]}