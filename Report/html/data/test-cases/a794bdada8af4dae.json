{
  "uid" : "a794bdada8af4dae",
  "name" : "test_personnel[上传文件]",
  "fullName" : "test_demo.Test_info#test_personnel",
  "historyId" : "86f47e88b801a26005df6aa3e8a825a3",
  "time" : {
    "start" : 1602555262775,
    "stop" : 1602555265168,
    "duration" : 2393
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000001206BA80438>, ff = 'post'\naddress = '/dnc/file/upload', data = 'deviceId:7429,remark:自动化备注', key = ''\nsql_data = '', excel_file = './document/XMZ_0.txt', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        address = address.replace(\" \", '')\n        data = data.replace(\" \", '')\n        excel_file = excel_file.replace(\" \", '')\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n                assertions.assert_code(rp_resp.status_code, 200)\n                login_resp_json = rp_resp.json()\n>               assertions.assert_in_text(login_resp_json['message'], msg)\n\nTest_case\\test_demo.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001206AA01828>\nbody = 'Internal server error', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:59: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000001206BA80438>, ff = 'post'\naddress = '/dnc/file/upload', data = 'deviceId:7429,remark:自动化备注', key = ''\nsql_data = '', excel_file = './document/XMZ_0.txt', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        address = address.replace(\" \", '')\n        data = data.replace(\" \", '')\n        excel_file = excel_file.replace(\" \", '')\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n                assertions.assert_code(rp_resp.status_code, 200)\n                login_resp_json = rp_resp.json()\n>               assertions.assert_in_text(login_resp_json['message'], msg)\n\nTest_case\\test_demo.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001206AA01828>\nbody = 'Internal server error', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:59: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "303b51ac519e9a99",
      "name" : "请求",
      "source" : "303b51ac519e9a99.txt",
      "type" : "text/plain",
      "size" : 1148
    }, {
      "uid" : "84f6724b3acdd5e1",
      "name" : "响应",
      "source" : "84f6724b3acdd5e1.txt",
      "type" : "text/plain",
      "size" : 276
    }, {
      "uid" : "23ccdb91ba32a07e",
      "name" : "log",
      "source" : "23ccdb91ba32a07e.txt",
      "type" : "text/plain",
      "size" : 1955
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "回归测试"
  }, {
    "name" : "story",
    "value" : "回归用例"
  }, {
    "name" : "tag",
    "value" : "ddd"
  }, {
    "name" : "suite",
    "value" : "test_demo"
  }, {
    "name" : "subSuite",
    "value" : "Test_info"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "56176-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_demo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "address",
    "value" : "'/dnc/file/upload'"
  }, {
    "name" : "data",
    "value" : "'deviceId:7429,remark:自动化备注'"
  }, {
    "name" : "excel_file",
    "value" : "'./document/XMZ_0.txt'"
  }, {
    "name" : "ff",
    "value" : "'post'"
  }, {
    "name" : "key",
    "value" : "''"
  }, {
    "name" : "msg",
    "value" : "'Success'"
  }, {
    "name" : "sql_data",
    "value" : "''"
  } ],
  "links" : [ {
    "name" : "https://txqa.ziyun-cloud.com",
    "url" : "https://txqa.ziyun-cloud.com",
    "type" : "issue"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "ddd" ]
  },
  "source" : "a794bdada8af4dae.json",
  "parameterValues" : [ "'/dnc/file/upload'", "'deviceId:7429,remark:自动化备注'", "'./document/XMZ_0.txt'", "'post'", "''", "'Success'", "''" ]
}