{
  "uid" : "b546d836b1c6cdb1",
  "name" : "test_personnel[上传文件前的校验]",
  "fullName" : "test_demo.Test_info#test_personnel",
  "historyId" : "5518e3c6205d065b919b6df7351fd707",
  "time" : {
    "start" : 1603249423904,
    "stop" : 1603249424544,
    "duration" : 640
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000001557E4219B0>, ff = 'post'\naddress = '/dnc/file/upload/check', data = '{\"fileListName\":[\"XMZ_0.txt\"]}'\nkey = 'deviceId'\nsql_data = 'ziyun-dnc,SELECT device_id FROM file order by update_time DESC LIMIT 1;'\nexcel_file = '', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        address = address.replace(\" \", '')\n        data = data.replace(\" \", '')\n        excel_file = excel_file.replace(\" \", '')\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n                assertions.assert_code(rp_resp.status_code, 200)\n                login_resp_json = rp_resp.json()\n                assertions.assert_in_text(login_resp_json['message'], msg)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n        elif sql_data is not None or sql_data != '':\n            split = sql_data.split(\",\", 1)\n            db_ = str(split[0])\n            sql_ = str(split[1])\n            if ff == 'get':\n                select_data = DataBase.mysql_select_hg(db=db_, sql=sql_)\n                for j in select_data:\n                    w = select_data[j]\n                all_data = \"{}={}\".format(key, w)\n                rp_resp = request.get_request(url=url + address,\n                                              params=data + all_data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            if ff == 'post':\n                select_data = DataBase.mysql_select_hg(db=db_, sql=sql_)\n                v = 0\n                for i in select_data:\n                    v1 = select_data[i]\n                    v = v1\n                v_data = {key: v}\n                rp_resp = request.post_request(url=url + address,\n                                               json={**json.loads(data), **v_data}, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n>               assertions.assert_in_text(rp_resp_json['message'], msg)\n\nTest_case\\test_demo.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001557D1ED470>\nbody = '上传名称重复[XMZ_0.txt]，请在回收站删除或还原后再操作', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:58: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000001557E4219B0>, ff = 'post'\naddress = '/dnc/file/upload/check', data = '{\"fileListName\":[\"XMZ_0.txt\"]}'\nkey = 'deviceId'\nsql_data = 'ziyun-dnc,SELECT device_id FROM file order by update_time DESC LIMIT 1;'\nexcel_file = '', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        address = address.replace(\" \", '')\n        data = data.replace(\" \", '')\n        excel_file = excel_file.replace(\" \", '')\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n                assertions.assert_code(rp_resp.status_code, 200)\n                login_resp_json = rp_resp.json()\n                assertions.assert_in_text(login_resp_json['message'], msg)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n        elif sql_data is not None or sql_data != '':\n            split = sql_data.split(\",\", 1)\n            db_ = str(split[0])\n            sql_ = str(split[1])\n            if ff == 'get':\n                select_data = DataBase.mysql_select_hg(db=db_, sql=sql_)\n                for j in select_data:\n                    w = select_data[j]\n                all_data = \"{}={}\".format(key, w)\n                rp_resp = request.get_request(url=url + address,\n                                              params=data + all_data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            if ff == 'post':\n                select_data = DataBase.mysql_select_hg(db=db_, sql=sql_)\n                v = 0\n                for i in select_data:\n                    v1 = select_data[i]\n                    v = v1\n                v_data = {key: v}\n                rp_resp = request.post_request(url=url + address,\n                                               json={**json.loads(data), **v_data}, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n>               assertions.assert_in_text(rp_resp_json['message'], msg)\n\nTest_case\\test_demo.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001557D1ED470>\nbody = '上传名称重复[XMZ_0.txt]，请在回收站删除或还原后再操作', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:58: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "d989290b6fe9d61f",
      "name" : "请求",
      "source" : "d989290b6fe9d61f.txt",
      "type" : "text/plain",
      "size" : 666
    }, {
      "uid" : "fcb5f04caebf52aa",
      "name" : "响应",
      "source" : "fcb5f04caebf52aa.txt",
      "type" : "text/plain",
      "size" : 348
    }, {
      "uid" : "c6e746ab07676255",
      "name" : "log",
      "source" : "c6e746ab07676255.txt",
      "type" : "text/plain",
      "size" : 4426
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "回归测试"
  }, {
    "name" : "story",
    "value" : "回归用例"
  }, {
    "name" : "tag",
    "value" : "ddd"
  }, {
    "name" : "suite",
    "value" : "test_demo"
  }, {
    "name" : "subSuite",
    "value" : "Test_info"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "26200-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_demo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "address",
    "value" : "'/dnc/file/upload/check'"
  }, {
    "name" : "data",
    "value" : "'{\"fileListName\":[\"XMZ_0.txt\"]}'"
  }, {
    "name" : "excel_file",
    "value" : "''"
  }, {
    "name" : "ff",
    "value" : "'post'"
  }, {
    "name" : "key",
    "value" : "'deviceId'"
  }, {
    "name" : "msg",
    "value" : "'Success'"
  }, {
    "name" : "sql_data",
    "value" : "'ziyun-dnc,SELECT device_id FROM file order by update_time DESC LIMIT 1;'"
  } ],
  "links" : [ {
    "name" : "https://txqa.ziyun-cloud.com",
    "url" : "https://txqa.ziyun-cloud.com",
    "type" : "issue"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "ddd" ]
  },
  "source" : "b546d836b1c6cdb1.json",
  "parameterValues" : [ "'/dnc/file/upload/check'", "'{\"fileListName\":[\"XMZ_0.txt\"]}'", "''", "'post'", "'deviceId'", "'Success'", "'ziyun-dnc,SELECT device_id FROM file order by update_time DESC LIMIT 1;'" ]
}