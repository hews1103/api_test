{
  "uid" : "383da4f05f282bac",
  "name" : "test_personnel[人员名称搜索]",
  "fullName" : "test_demo.Test_info#test_personnel",
  "historyId" : "552355b78315153acbf20651938e0946",
  "time" : {
    "start" : 1603682237054,
    "stop" : 1603682237424,
    "duration" : 370
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000002630484FDA0>, ff = 'get'\naddress = '/dnc/file/blurry/user', data = '', key = '', sql_data = ''\nexcel_file = '', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        rp_resp = ''\n        #去除接口地址中的空格\n        address = address.replace(\" \", '')\n        #去除上传文件路径中的空格\n        excel_file = excel_file.replace(\" \", '')\n        #sql为空或不填\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n            #执行断言\n            assertions.assert_code(rp_resp.status_code, 200)\n            rp_resp_json = rp_resp.json()\n>           assertions.assert_in_text(rp_resp_json['message'], msg)\n\nTest_case\\test_demo.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000002630482AC50>\nbody = 'deviceId不能为空', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:58: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_case.test_demo.Test_info object at 0x000002630484FDA0>, ff = 'get'\naddress = '/dnc/file/blurry/user', data = '', key = '', sql_data = ''\nexcel_file = '', msg = 'Success'\n\n    @pytest.mark.parametrize('ff,address,data,key,sql_data,excel_file,msg', excel_list, ids=ids_list)\n    @allure.story(\"回归用例\")\n    def test_personnel(self, ff, address, data, key, sql_data, excel_file, msg):\n        rp_resp = ''\n        #去除接口地址中的空格\n        address = address.replace(\" \", '')\n        #去除上传文件路径中的空格\n        excel_file = excel_file.replace(\" \", '')\n        #sql为空或不填\n        if sql_data is None or sql_data == '':\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n            elif ff == 'post' and excel_file is None or excel_file == '':\n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n            elif ff == 'post' and excel_file is not None or excel_file != '':\n                with open(str(excel_file), mode=\"r\", encoding=\"utf-8\")as f:\n                    file_splist = excel_file.split(\"/\")\n                    data_splist = data.split(\":\")\n                    data2_splist = data_splist[1].split(\",\")\n                    file = {\"file\": (file_splist[-1], f.read()), data_splist[0]: data2_splist[0],\n                            data2_splist[1]: data_splist[2]}\n                    encode_data = encode_multipart_formdata(file)\n                    file_data = encode_data[0]\n                    headers_from_data = {\"Content-Type\": encode_data[1],\n                                         \"token\": token_data}\n                rp_resp = request.post_request(url=url + address,\n                                               data=file_data, headers=headers_from_data)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n            #执行断言\n            assertions.assert_code(rp_resp.status_code, 200)\n            rp_resp_json = rp_resp.json()\n>           assertions.assert_in_text(rp_resp_json['message'], msg)\n\nTest_case\\test_demo.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000002630482AC50>\nbody = 'deviceId不能为空', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:58: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4bb8667521cbea8f",
      "name" : "请求",
      "source" : "4bb8667521cbea8f.txt",
      "type" : "text/plain",
      "size" : 567
    }, {
      "uid" : "f458c9df7bf4a239",
      "name" : "响应",
      "source" : "f458c9df7bf4a239.txt",
      "type" : "text/plain",
      "size" : 277
    }, {
      "uid" : "ceda8f5cb95c2ce9",
      "name" : "log",
      "source" : "ceda8f5cb95c2ce9.txt",
      "type" : "text/plain",
      "size" : 4512
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "回归用例"
  }, {
    "name" : "feature",
    "value" : "回归测试"
  }, {
    "name" : "tag",
    "value" : "ddd"
  }, {
    "name" : "suite",
    "value" : "test_demo"
  }, {
    "name" : "subSuite",
    "value" : "Test_info"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "18788-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_demo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "address",
    "value" : "'/dnc/file/blurry/user'"
  }, {
    "name" : "data",
    "value" : "''"
  }, {
    "name" : "excel_file",
    "value" : "''"
  }, {
    "name" : "ff",
    "value" : "'get'"
  }, {
    "name" : "key",
    "value" : "''"
  }, {
    "name" : "msg",
    "value" : "'Success'"
  }, {
    "name" : "sql_data",
    "value" : "''"
  } ],
  "links" : [ {
    "name" : "https://txqa.ziyun-cloud.com",
    "url" : "https://txqa.ziyun-cloud.com",
    "type" : "issue"
  } ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "ff55beb875a561e3",
      "status" : "passed",
      "time" : {
        "start" : 1603681666987,
        "stop" : 1603681667391,
        "duration" : 404
      }
    }, {
      "uid" : "76eac617fa99383e",
      "status" : "broken",
      "statusDetails" : "AttributeError: 'tuple' object has no attribute 'url'",
      "time" : {
        "start" : 1603681576321,
        "stop" : 1603681576685,
        "duration" : 364
      }
    }, {
      "uid" : "5761fac12094a797",
      "status" : "passed",
      "time" : {
        "start" : 1603681537948,
        "stop" : 1603681538472,
        "duration" : 524
      }
    }, {
      "uid" : "95f1a4927b8250be",
      "status" : "broken",
      "statusDetails" : "AttributeError: 'tuple' object has no attribute 'url'",
      "time" : {
        "start" : 1603681498297,
        "stop" : 1603681498665,
        "duration" : 368
      }
    }, {
      "uid" : "956fa354abe1c664",
      "status" : "passed",
      "time" : {
        "start" : 1603681297196,
        "stop" : 1603681297606,
        "duration" : 410
      }
    }, {
      "uid" : "4271b49b94f85838",
      "status" : "passed",
      "time" : {
        "start" : 1603681043530,
        "stop" : 1603681043937,
        "duration" : 407
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "ddd" ]
  },
  "source" : "383da4f05f282bac.json",
  "parameterValues" : [ "'/dnc/file/blurry/user'", "''", "''", "'get'", "''", "'Success'", "''" ]
}