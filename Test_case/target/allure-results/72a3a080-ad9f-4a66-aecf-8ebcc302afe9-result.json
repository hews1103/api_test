{"name": "test_personnel[修改备注]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <Test_ziyun.test_demo.Test_info object at 0x000001DA207AA9E8>, ff = 'put'\naddress = '/dnc/file/edit/remark'\ndata = '{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}', data1 = ''\nmsg = 'Success', sql = ''\n\n    @pytest.mark.parametrize('ff,address,data,data1,msg,sql', excel_list, ids=ids_list)\n    def test_personnel(self, ff, address, data,data1, msg, sql):\n        if sql is None or sql == '':\n            print('sql is none')\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post':\n    \n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n>               assertions.assert_in_text(rp_resp_json['message'], msg)\n\ntest_demo.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA206497F0>\nbody = 'Internal server error', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError"}, "attachments": [{"name": "log", "source": "ad5d7986-e09f-4ce7-9de3-1497e1195131-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "ff", "value": "'put'"}, {"name": "address", "value": "'/dnc/file/edit/remark'"}, {"name": "data", "value": "'{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}'"}, {"name": "data1", "value": "''"}, {"name": "msg", "value": "'Success'"}, {"name": "sql", "value": "''"}], "start": 1600413562715, "stop": 1600413563123, "uuid": "b1a9ee99-4abe-4ad2-9e81-749b3bb7f64f", "historyId": "b3873dd178219e2c534c31f6d2f95255", "testCaseId": "71b135ca58a2f94a92c67fae54b7386a", "fullName": "test_demo.Test_info#test_personnel", "labels": [{"name": "tag", "value": "ddd"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "Test_info"}, {"name": "host", "value": "DESKTOP-FIOLAUQ"}, {"name": "thread", "value": "41740-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_demo"}]}