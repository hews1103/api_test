{
  "uid" : "2ca80b85b9a5d0c3",
  "name" : "test_history_download",
  "fullName" : "test_DNC.Test_device_ml#test_history_download",
  "historyId" : "551342a9e515e75d86f2971acfdd1c91",
  "time" : {
    "start" : 1600413552406,
    "stop" : 1600413552861,
    "duration" : 455
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_ziyun.test_DNC.Test_device_ml object at 0x000001DA207507B8>\n\n    @allure.story(\"历史版本文件下载\")\n    def test_history_download(self):\n        rp_resp = request.get_request(url=url + '/file/version',\n                                      params={'versionId': versionId},\n                                      headers=head)\n        assertions.assert_code(rp_resp.status_code, 200)\n    \n>       assertions.assert_in_text(rp_resp.text, '%')\n\ntest_DNC.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA1F5DA0F0>\nbody = '{\"code\":1000,\"message\":\"该文件不存在!\",\"subCode\":\"1000_1\"}'\nexpected_msg = '%'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_ziyun.test_DNC.Test_device_ml object at 0x000001DA207507B8>\n\n    @allure.story(\"历史版本文件下载\")\n    def test_history_download(self):\n        rp_resp = request.get_request(url=url + '/file/version',\n                                      params={'versionId': versionId},\n                                      headers=head)\n        assertions.assert_code(rp_resp.status_code, 200)\n    \n>       assertions.assert_in_text(rp_resp.text, '%')\n\ntest_DNC.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA1F5DA0F0>\nbody = '{\"code\":1000,\"message\":\"该文件不存在!\",\"subCode\":\"1000_1\"}'\nexpected_msg = '%'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bb47e439cbe2e4b9",
      "name" : "请求",
      "source" : "bb47e439cbe2e4b9.txt",
      "type" : "text/plain",
      "size" : 577
    }, {
      "uid" : "ffc732fcfc87c647",
      "name" : "响应",
      "source" : "ffc732fcfc87c647.txt",
      "type" : "text/plain",
      "size" : 294
    }, {
      "uid" : "26de31a7a4d76466",
      "name" : "log",
      "source" : "26de31a7a4d76466.txt",
      "type" : "text/plain",
      "size" : 7158
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "历史版本文件下载"
  }, {
    "name" : "feature",
    "value" : "设备目录分发页、回传页接口"
  }, {
    "name" : "suite",
    "value" : "test_DNC"
  }, {
    "name" : "subSuite",
    "value" : "Test_device_ml"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "41740-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_DNC"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "5c9ea8210aa320bd",
      "status" : "passed",
      "time" : {
        "start" : 1600411865739,
        "stop" : 1600411866284,
        "duration" : 545
      }
    }, {
      "uid" : "e94cd4c063df19a",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411751187,
        "stop" : 1600411751609,
        "duration" : 422
      }
    }, {
      "uid" : "5fb839f998211150",
      "status" : "passed",
      "time" : {
        "start" : 1600411448334,
        "stop" : 1600411448922,
        "duration" : 588
      }
    }, {
      "uid" : "1d6a3420a02074ef",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411290589,
        "stop" : 1600411291026,
        "duration" : 437
      }
    }, {
      "uid" : "d605e5c7c274cd77",
      "status" : "passed",
      "time" : {
        "start" : 1600411126436,
        "stop" : 1600411126999,
        "duration" : 563
      }
    }, {
      "uid" : "89bbc8d5ffd22d45",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600410740131,
        "stop" : 1600410740547,
        "duration" : 416
      }
    }, {
      "uid" : "a4c6e83954b8b51",
      "status" : "passed",
      "time" : {
        "start" : 1600410605003,
        "stop" : 1600410605588,
        "duration" : 585
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "eb1b4d6ae6082131",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/45/allure/#testresult/eb1b4d6ae6082131",
        "status" : "passed",
        "time" : {
          "start" : 1600411865739,
          "stop" : 1600411866284,
          "duration" : 545
        }
      }, {
        "uid" : "880dbda21d45ea67",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/43/allure/#testresult/880dbda21d45ea67",
        "status" : "passed",
        "time" : {
          "start" : 1600411448334,
          "stop" : 1600411448922,
          "duration" : 588
        }
      }, {
        "uid" : "8f7d5847dc7ca4a7",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/40/allure/#testresult/8f7d5847dc7ca4a7",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1600410740131,
          "stop" : 1600410740547,
          "duration" : 416
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "2ca80b85b9a5d0c3.json",
  "parameterValues" : [ ]
}