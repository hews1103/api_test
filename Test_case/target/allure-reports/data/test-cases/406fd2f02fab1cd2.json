{
  "uid" : "406fd2f02fab1cd2",
  "name" : "test_personnel[修改备注]",
  "fullName" : "test_demo.Test_info#test_personnel",
  "historyId" : "b3873dd178219e2c534c31f6d2f95255",
  "time" : {
    "start" : 1600413562715,
    "stop" : 1600413563123,
    "duration" : 408
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_ziyun.test_demo.Test_info object at 0x000001DA207AA9E8>, ff = 'put'\naddress = '/dnc/file/edit/remark'\ndata = '{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}', data1 = ''\nmsg = 'Success', sql = ''\n\n    @pytest.mark.parametrize('ff,address,data,data1,msg,sql', excel_list, ids=ids_list)\n    def test_personnel(self, ff, address, data,data1, msg, sql):\n        if sql is None or sql == '':\n            print('sql is none')\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post':\n    \n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n>               assertions.assert_in_text(rp_resp_json['message'], msg)\n\ntest_demo.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA206497F0>\nbody = 'Internal server error', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_ziyun.test_demo.Test_info object at 0x000001DA207AA9E8>, ff = 'put'\naddress = '/dnc/file/edit/remark'\ndata = '{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}', data1 = ''\nmsg = 'Success', sql = ''\n\n    @pytest.mark.parametrize('ff,address,data,data1,msg,sql', excel_list, ids=ids_list)\n    def test_personnel(self, ff, address, data,data1, msg, sql):\n        if sql is None or sql == '':\n            print('sql is none')\n            if ff == 'get':\n                rp_resp = request.get_request(url=url + address,\n                                              params=data, headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'post':\n    \n                rp_resp = request.post_request(url=url + address,\n                                               json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n                assertions.assert_in_text(rp_resp_json['message'], msg)\n            elif ff == 'put':\n                rp_resp = requests.put(url + address,\n                                       json=json.loads(data), headers=head)\n                assertions.assert_code(rp_resp.status_code, 200)\n                rp_resp_json = rp_resp.json()\n>               assertions.assert_in_text(rp_resp_json['message'], msg)\n\ntest_demo.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA206497F0>\nbody = 'Internal server error', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "f8b7f206c90cef0a",
      "name" : "log",
      "source" : "f8b7f206c90cef0a.txt",
      "type" : "text/plain",
      "size" : 350
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "ddd"
  }, {
    "name" : "suite",
    "value" : "test_demo"
  }, {
    "name" : "subSuite",
    "value" : "Test_info"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "41740-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_demo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "address",
    "value" : "'/dnc/file/edit/remark'"
  }, {
    "name" : "data",
    "value" : "'{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}'"
  }, {
    "name" : "data1",
    "value" : "''"
  }, {
    "name" : "ff",
    "value" : "'put'"
  }, {
    "name" : "msg",
    "value" : "'Success'"
  }, {
    "name" : "sql",
    "value" : "''"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "2d6bcbdfaa1468ee",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411875979,
        "stop" : 1600411876376,
        "duration" : 397
      }
    }, {
      "uid" : "16834618c2dc649d",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411760689,
        "stop" : 1600411761107,
        "duration" : 418
      }
    }, {
      "uid" : "b1fdeeeadda5bc4d",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411458314,
        "stop" : 1600411458721,
        "duration" : 407
      }
    }, {
      "uid" : "456bead613b3b7a9",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411300137,
        "stop" : 1600411300537,
        "duration" : 400
      }
    }, {
      "uid" : "bfb01aecf492417e",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411136298,
        "stop" : 1600411136728,
        "duration" : 430
      }
    }, {
      "uid" : "a486d13f0f15c500",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600410749928,
        "stop" : 1600410750318,
        "duration" : 390
      }
    }, {
      "uid" : "cd47a69e2519d3c1",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600410615515,
        "stop" : 1600410615907,
        "duration" : 392
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 4,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "836ae2a4ef207752",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/45/allure/#testresult/836ae2a4ef207752",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1600411875979,
          "stop" : 1600411876376,
          "duration" : 397
        }
      }, {
        "uid" : "1ba51a7265407e76",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/43/allure/#testresult/1ba51a7265407e76",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1600411458314,
          "stop" : 1600411458721,
          "duration" : 407
        }
      }, {
        "uid" : "30a06c4843280e71",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/40/allure/#testresult/30a06c4843280e71",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1600410749928,
          "stop" : 1600410750318,
          "duration" : 390
        }
      } ]
    },
    "tags" : [ "ddd" ]
  },
  "source" : "406fd2f02fab1cd2.json",
  "parameterValues" : [ "'/dnc/file/edit/remark'", "'{\"versionId\": 1111, \"remark\": \"自动化编辑备注\",\"type\":0}'", "''", "'put'", "'Success'", "''" ]
}