{
  "uid" : "6993c881b41d3de6",
  "name" : "test_file_hg",
  "fullName" : "test_DNC.Test_device_ml#test_file_hg",
  "historyId" : "93f35517ee710fa17a40eadd2c2a4ecf",
  "time" : {
    "start" : 1600413556324,
    "stop" : 1600413556753,
    "duration" : 429
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <Test_ziyun.test_DNC.Test_device_ml object at 0x000001DA20665B38>\n\n    @allure.story(\"文件回滚\")\n    def test_file_hg(self):\n        rp_resp = requests.put(url + '/rollback',\n                               json={'fileId': fileId, 'versionId': versionId, 'reason': '自动化回滚'},\n                               headers={'token': token_data})\n        assertions.assert_code(rp_resp.status_code, 200)\n        rp_resp_json = rp_resp.json()\n        print(rp_resp_json)\n>       assertions.assert_in_text(rp_resp_json['message'], 'Success')\n\ntest_DNC.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA1F5DA0F0>\nbody = '未查找到该文件信息', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
  "flaky" : true,
  "newFailed" : true,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <Test_ziyun.test_DNC.Test_device_ml object at 0x000001DA20665B38>\n\n    @allure.story(\"文件回滚\")\n    def test_file_hg(self):\n        rp_resp = requests.put(url + '/rollback',\n                               json={'fileId': fileId, 'versionId': versionId, 'reason': '自动化回滚'},\n                               headers={'token': token_data})\n        assertions.assert_code(rp_resp.status_code, 200)\n        rp_resp_json = rp_resp.json()\n        print(rp_resp_json)\n>       assertions.assert_in_text(rp_resp_json['message'], 'Success')\n\ntest_DNC.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x000001DA1F5DA0F0>\nbody = '未查找到该文件信息', expected_msg = 'Success'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\n..\\Common\\Assert.py:59: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cd2d11a41dcf6923",
      "name" : "log",
      "source" : "cd2d11a41dcf6923.txt",
      "type" : "text/plain",
      "size" : 342
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "文件回滚"
  }, {
    "name" : "feature",
    "value" : "设备目录分发页、回传页接口"
  }, {
    "name" : "suite",
    "value" : "test_DNC"
  }, {
    "name" : "subSuite",
    "value" : "Test_device_ml"
  }, {
    "name" : "host",
    "value" : "DESKTOP-FIOLAUQ"
  }, {
    "name" : "thread",
    "value" : "41740-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_DNC"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "bb4a4435736098c6",
      "status" : "passed",
      "time" : {
        "start" : 1600411869705,
        "stop" : 1600411870188,
        "duration" : 483
      }
    }, {
      "uid" : "6a6f019bf8b9db3c",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411754975,
        "stop" : 1600411755389,
        "duration" : 414
      }
    }, {
      "uid" : "e6751e8892244e4e",
      "status" : "passed",
      "time" : {
        "start" : 1600411452407,
        "stop" : 1600411452900,
        "duration" : 493
      }
    }, {
      "uid" : "b57b2fdeb4c4c94e",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600411294538,
        "stop" : 1600411294978,
        "duration" : 440
      }
    }, {
      "uid" : "a1973d8be6679118",
      "status" : "passed",
      "time" : {
        "start" : 1600411130434,
        "stop" : 1600411130994,
        "duration" : 560
      }
    }, {
      "uid" : "c417c76bf84f36a1",
      "status" : "failed",
      "statusDetails" : "AssertionError",
      "time" : {
        "start" : 1600410744288,
        "stop" : 1600410744677,
        "duration" : 389
      }
    }, {
      "uid" : "82060bd7be8d22b2",
      "status" : "passed",
      "time" : {
        "start" : 1600410609205,
        "stop" : 1600410609712,
        "duration" : 507
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 2,
        "broken" : 0,
        "skipped" : 0,
        "passed" : 2,
        "unknown" : 0,
        "total" : 4
      },
      "items" : [ {
        "uid" : "736e2e0f13de6122",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/45/allure/#testresult/736e2e0f13de6122",
        "status" : "passed",
        "time" : {
          "start" : 1600411869705,
          "stop" : 1600411870188,
          "duration" : 483
        }
      }, {
        "uid" : "9fd00c356d6cb05c",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/43/allure/#testresult/9fd00c356d6cb05c",
        "status" : "passed",
        "time" : {
          "start" : 1600411452407,
          "stop" : 1600411452900,
          "duration" : 493
        }
      }, {
        "uid" : "be79ab5c647f15a5",
        "reportUrl" : "http://localhost:8080/job/Allure%20Report/40/allure/#testresult/be79ab5c647f15a5",
        "status" : "failed",
        "statusDetails" : "AssertionError",
        "time" : {
          "start" : 1600410744288,
          "stop" : 1600410744677,
          "duration" : 389
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "6993c881b41d3de6.json",
  "parameterValues" : [ ]
}